generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id                Int              @id @default(autoincrement())
  user_email             String           @unique
  user_providerId        String
  user_image_url         String? //윤수님 쳌
  user_nickname          String?
  user_points            Int              @default(0) // 탐험포인트 작명 어떻게
  user_level             Int              @default(0) // 사용자의 레벨 정보
  user_is_admin          Role             @default(BASIC)
  user_authored_posts    Post[] // 사용자가 작성한 포스트들
  user_visited_places    PlaceVisit[] // 사용자가 방문한 장소들
  user_badges            Badge[] // 사용자의 뱃지들
  user_selected_badge    Badge?           @relation("SelectedBadge", fields: [user_selected_badge_id], references: [badge_id])
  user_selected_badge_id Int              @default(1)
  user_is_deleted        Boolean          @default(false)
  user_created_at        DateTime         @default(now())
  user_updated_at        DateTime         @updatedAt
  user_search_history    SearchHistory[]
  user_activities        UserActivities[]
  user_refresh_token     String?
}

model Badge {
  badge_id                     Int      @id @default(autoincrement())
  badge_name                   String
  badge_category               Category @relation(fields: [badge_category_id], references: [category_id])
  badge_category_id            Int
  badge_criteria               Int
  badge_points                 Int?     @default(100)
  badge_owned_users            User[]
  badge_users_who_select_title User[]   @relation("SelectedBadge")
  badge_image_url              String
}

model UserRanking {
  user_id     Int @id
  user_points Int
  rank        Int
}

model UserActivities {
  activity_id         Int      @id @default(autoincrement())
  activity_user_id    Int?
  activity_type       String // 활동 유형 (포스트 작성, 장소 방문, 뱃지 획득 등)
  activity_details    Json // 활동에 대한 추가 정보 (예: 포스트 ID, 장소 ID, 뱃지 ID 등)
  activity_created_at DateTime @default(now())
  activity_user       User?    @relation(fields: [activity_user_id], references: [user_id])
}

model Post {
  post_id          Int      @id @default(autoincrement())
  post_created_at  DateTime @default(now())
  post_updated_at  DateTime @updatedAt
  post_description String?
  post_image_url   String
  post_author      User     @relation(fields: [post_author_id], references: [user_id])
  post_author_id   Int
  post_star_rating Float?
  post_place       Place?   @relation(fields: [post_place_id], references: [place_id])
  post_place_id    Int?
  post_is_deleted  Boolean  @default(false)
}

model PlaceVisit {
  visited_id       Int      @id @default(autoincrement())
  visited_date     DateTime @default(now())
  visited_place    Place    @relation(fields: [visited_place_id], references: [place_id])
  visited_place_id Int
  visited_user     User     @relation(fields: [visited_user_id], references: [user_id])
  visited_user_id  Int
}

model Place {
  place_id           Int                @id @default(autoincrement())
  place_created_at   DateTime           @default(now())
  place_updated_at   DateTime           @updatedAt
  place_name         String             @unique
  place_star_rating  Float?
  place_points       Int?
  place_address      String?
  place_region       Region?            @relation(fields: [place_region_id], references: [region_id])
  place_region_id    Int?
  place_latitude     Float?
  place_longitude    Float?
  place_visited_by   PlaceVisit[]
  place_posts        Post[]
  place_category_map MapPlaceCategory[]
}

model Region {
  region_id           Int     @id @default(autoincrement())
  region_name         String
  region_english_name String
  region_place        Place[]
}

model Category {
  category_id           Int                @id @default(autoincrement())
  category_name         String             @unique
  category_points       Int?
  category_created_at   DateTime           @default(now())
  category_updated_at   DateTime           @updatedAt
  category_badges       Badge[]
  category_map_category MapPlaceCategory[]
}

model MapPlaceCategory {
  place      Place    @relation(fields: [placeId], references: [place_id])
  placeId    Int
  category   Category @relation(fields: [categoryId], references: [category_id])
  categoryId Int

  @@id([placeId, categoryId]) // 복합 기본 키 조합이 pk 대신 고유한 식별자로 작용합니다
}

model SearchHistory {
  search_history_id Int      @id @default(autoincrement())
  search_keyword    String
  search_time       DateTime @default(now())
  search_user       User     @relation(fields: [search_user_id], references: [user_id])
  search_user_id    Int
}

model Level {
  level_id          Int      @id @default(autoincrement())
  level_level       Int      @unique
  level_points      Int
  level_description String
  level_created_at  DateTime @default(now())
  level_updated_at  DateTime @updatedAt
}

enum Role {
  BASIC
  ADMIN
}

//참고 : https://vertabelo.com/blog/user-profile-database-model/
